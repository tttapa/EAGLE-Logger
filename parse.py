import struct


def nextWord(i: int):
    return i - (i % 4) + 4


def roundUpToWordSizeMultiple(i: int):
    return i + 3 - ((i + 3) % 4)


def bytesToType(datatype: int, data: bytes):
    return {
        1: lambda d: struct.unpack('<I', d)[0],  # uint32_t
        2: lambda d: struct.unpack('<i', d)[0],  # int32_t
        3: lambda d: struct.unpack('<Q', d)[0],  # uint64_t
        4: lambda d: struct.unpack('<q', d)[0],  # int64_t
        5: lambda d: struct.unpack('<f', d)[0],  # float
        6: lambda d: struct.unpack('<d', d)[0],  # double
        7: lambda d: struct.unpack('<?', d)[0],  # bool
        8: lambda d: struct.unpack('<B', d)[0],  # uint8_t
        9: lambda d: struct.unpack('<b', d)[0],  # char
    }[datatype](data)


def typeToSize(datatype: int):
    return {
        1: 4,  # uint32_t
        2: 4,  # int32_t
        3: 8,  # uint64_t
        4: 8,  # int64_t
        5: 4,  # float
        6: 8,  # double
        7: 1,  # bool
        8: 1,  # uint8_t
        9: 1,  # char
    }[datatype]


def parse(buffer: bytes) -> dict:
    result = dict()
    index = 0
    while index < len(buffer):
        if buffer[index] == 0x00:
            break
        print(buffer[index])
        identifierbytes = buffer[index:buffer.find(0x00, index)]
        identifier = identifierbytes.decode('utf-8')
        print(index, end='\t')
        print(identifier)
        headerstart = nextWord(len(identifierbytes))
        print(index + headerstart)
        datatype = int(buffer[index + headerstart])
        length = \
            (buffer[index + headerstart + 1] << 0) | \
            (buffer[index + headerstart + 2] << 8) | \
            (buffer[index + headerstart + 2] << 16)
        datastart = headerstart + 4
        elementsize = typeToSize(datatype)
        if datatype == 9:  # if it's a char array
            absdatastart = index + datastart
            string = buffer[absdatastart:absdatastart + length].decode('utf-8')
            result[identifier] = string
        else:
            data = []
            for i in range(length // elementsize):
                elementindex = index + datastart + i * elementsize
                element = bytesToType(
                    datatype, buffer[elementindex:elementindex + elementsize])
                data.append(element)
            result[identifier] = data
        index += datastart + roundUpToWordSizeMultiple(length)
    return result


testdata = bytes((
    0x69, 0x64, 0x65, 0x6E,
    0x74, 0x69, 0x66, 0x69,
    0x65, 0x72, 0x00, 0xD9,
    0x01, 0x10, 0x00, 0x00,
    0xEF, 0xBE, 0xAD, 0xDE,
    0x44, 0x33, 0x22, 0x11,
    0x55, 0x55, 0x55, 0x55,
    0x10, 0x10, 0x10, 0x10,
    0x64, 0x6F, 0x75, 0x62,
    0x6C, 0x65, 0x73, 0x00,
    0x06, 0x10, 0x00, 0x00,
    0xF6, 0x28, 0x5C, 0x8F,
    0xC2, 0x35, 0x45, 0x40,
    0xAB, 0xAA, 0xAA, 0xAA,
    0xAA, 0xAA, 0x40, 0x40,
    0x6C, 0x6F, 0x6E, 0x67,
    0x73, 0x00, 0x00, 0x00,
    0x03, 0x10, 0x00, 0x00,
    0x88, 0x77, 0x66, 0x55,
    0x44, 0x33, 0x22, 0x11,
    0x00, 0xFF, 0xEE, 0xDD,
    0xCC, 0xBB, 0xAA, 0x99,
    0x75, 0x38, 0x78, 0x34,
    0x00, 0x00, 0x00, 0x00,
    0x08, 0x04, 0x00, 0x00,
    0x11, 0x22, 0x33, 0x44,
    0x75, 0x38, 0x78, 0x33,
    0x00, 0x7F, 0x00, 0x00,
    0x08, 0x03, 0x00, 0x00,
    0x11, 0x22, 0x33, 0x00,
    0x75, 0x38, 0x78, 0x32,
    0x00, 0x7F, 0x00, 0x00,
    0x08, 0x02, 0x00, 0x00,
    0x11, 0x22, 0x00, 0x00,
    0x75, 0x38, 0x78, 0x31,
    0x00, 0x7F, 0x00, 0x00,
    0x08, 0x01, 0x00, 0x00,
    0x11, 0x7F, 0x00, 0x00,
    0x75, 0x38, 0x78, 0x35,
    0x00, 0x7F, 0x00, 0x00,
    0x08, 0x05, 0x00, 0x00,
    0x11, 0x22, 0x33, 0x44,
    0x55, 0x27, 0xD5, 0xD9,
    0x64, 0x65, 0x61, 0x64,
    0x62, 0x65, 0x65, 0x66,
    0x00, 0x7F, 0x00, 0x00,
    0x01, 0x04, 0x00, 0x00,
    0xDE, 0xAD, 0xBE, 0xEF,
    0x73, 0x74, 0x72, 0x69,
    0x6E, 0x67, 0x00, 0x00,
    0x09, 0x0B, 0x00, 0x00,
    0x74, 0x65, 0x73, 0x74,
    0x2D, 0x73, 0x74, 0x72,
    0x69, 0x6E, 0x67, 0x00,
    0x63, 0x2D, 0x61, 0x72,
    0x72, 0x61, 0x79, 0x00,
    0x01, 0x08, 0x00, 0x00,
    0x44, 0x33, 0x22, 0x11,
    0x88, 0x77, 0x66, 0x55,
    0x73, 0x74, 0x64, 0x3A,
    0x3A, 0x61, 0x72, 0x72,
    0x61, 0x79, 0x00, 0x00,
    0x01, 0x08, 0x00, 0x00,
    0x44, 0x33, 0x22, 0x11,
    0x88, 0x77, 0x66, 0x55,
    0x75, 0x6E, 0x69, 0x63,
    0x6F, 0x64, 0x65, 0x00,
    0x09, 0x04, 0x00, 0x00,
    0xF0, 0x9F, 0x8E, 0xB9,
    0xF0, 0x9F, 0x94, 0x91,
    0x20, 0x4B, 0x65, 0x79,
    0x00, 0x00, 0x00, 0x00,
    0x09, 0x0B, 0x00, 0x00,
    0x75, 0x6E, 0x69, 0x63,
    0x6F, 0x64, 0x65, 0x20,
    0x6B, 0x65, 0x79, 0x00,
    0xE6, 0x97, 0xA5, 0x00,
    0x09, 0x03, 0x00, 0x00,
    0xE6, 0x98, 0x8E, 0x00,
    0x00, 0x00, 0x00, 0x00,
))

if __name__ == "__main__":
    print(parse(testdata))
